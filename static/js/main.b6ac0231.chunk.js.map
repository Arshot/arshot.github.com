{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loader","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","images","loaded","count","currentImage","imagesToWatch","closeLightbox","bind","assertThisInitialized","gotoPrevLightboxImage","gotoNextLightboxImage","_this2","setState","objectSpread","fetch","then","response","json","console","log","rows","Math","ceil","length","catch","error","index","arr","forEach","elem","push","src","lightboxIsOpen","loadShibe","_this3","react_default","a","createElement","className","style","display","flexDirection","alignItems","marginRight","fontSize","type","value","onChange","e","changeCount","target","onClick","gridTemplateRows","map","item","key","width","height","backgroundSize","backgroundImage","open","Lightbox_default","backdropClosesModal","isOpen","onClickPrev","onClickNext","onClose","imageCountSeparator","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yNCIpCC,SAASC,EAAQ,KAwHNC,cArHb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,GACRC,QAAQ,EACRC,MAAO,EACPC,aAAc,EACdC,cAAe,IAEjBZ,EAAKa,cAAgBb,EAAKa,cAAcC,KAAnBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACrBA,EAAKgB,sBAAwBhB,EAAKgB,sBAAsBF,KAA3Bb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAC7BA,EAAKiB,sBAAwBjB,EAAKiB,sBAAsBH,KAA3Bb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAXbA,2EAcP,IAAAkB,EAAAf,KACTA,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAkBE,KAAKI,MAAvB,CAA8BE,QAAQ,KACtCY,MAAM,4EAA8ElB,KAAKI,MAAMG,MAAQ,6BACtGY,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACE,GACLC,QAAQC,IAAIF,GACZ,IAAIG,EAAOC,KAAKC,KAAKL,EAAKM,OAAS,GACnCZ,EAAKC,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAkBiB,EAAKX,MAAvB,CAA8BC,OAAQgB,EAAMf,QAAQ,EAAMkB,KAAMA,OAEjEI,MAAM,SAACC,GACNP,QAAQO,MAAMA,yCAINtB,GACVe,QAAQC,IAAIhB,GACTA,EACEA,EAAQ,GAAKA,EAAQ,IACtBP,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAkBE,KAAKI,MAAvB,CAA8BG,MAAOA,KAE/BA,EAAQ,IACdP,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAkBE,KAAKI,MAAvB,CAA8BG,MAAO,OAC/BA,EAAQ,GACdP,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAkBE,KAAKI,MAAvB,CAA8BG,MAAO,KAGvCP,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAkBE,KAAKI,MAAvB,CAA8BG,MAAO,mCAIpCuB,GACH,IAAIC,EAAM,GACV/B,KAAKI,MAAMC,OAAO2B,QAAQ,SAAAC,GACtBF,EAAIG,KAAK,CAAEC,IAAKF,MAEpBjC,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAmBE,KAAKI,MAAxB,CAA+BI,aAAcsB,EAAOM,gBAAgB,EAAM3B,cAAesB,6CAIvF/B,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAmBE,KAAKI,MAAxB,CAA+BI,aAAc,EAAG4B,gBAAgB,qDAIhEpC,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAmBE,KAAKI,MAAxB,CAA+BI,aAAcR,KAAKI,MAAMI,aAAe,qDAIvER,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAmBE,KAAKI,MAAxB,CAA+BI,aAAcR,KAAKI,MAAMI,aAAe,iDAIzER,KAAKqC,6CAGE,IAAAC,EAAAtC,KACP,OACEuC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,+CACAH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CACVC,QAAS,OAAQC,cAAe,MAAOC,WAAY,UAAWC,YAAa,KAE3ER,EAAAC,EAAAC,cAAA,QAAME,MAAO,CACXK,SAAU,GAAID,YAAa,GAAIH,QAAS,OAAQE,WAAY,WAD9D,2GAGAP,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,MAAOlD,KAAKI,MAAMG,MAAO4C,SAAU,SAACC,GAAD,OAAKd,EAAKe,YAAYD,EAAEE,OAAOJ,UACrFX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWa,QAAS,kBAAIjB,EAAKD,cAA/C,4DAIJE,EAAAC,EAAAC,cAAChD,EAAD,CAAQa,OAAQN,KAAKI,MAAME,QACpBN,KAAKI,MAAMC,OAAOsB,OAAS,GAC5BY,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACa,iBAAkB,UAAYxD,KAAKI,MAAMoB,KAAO,WAAYkB,UAAU,aAChF1C,KAAKI,MAAMC,OAAOoD,IAAI,SAACC,EAAM5B,GAC5B,OACES,EAAAC,EAAAC,cAAA,OACEC,UAAU,OACViB,IAAK7B,EACLa,MAAO,CAACiB,MAAO,MAAOC,OAAQ,OAAQC,eAAgB,QAASC,gBAAiB,OAASL,EAAO,KAChGH,QAAS,kBAAIjB,EAAK0B,KAAKlC,WAQvCS,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CACE0B,qBAAqB,EACnB7D,OAAQL,KAAKI,MAAMK,cACnB0D,OAAQnE,KAAKI,MAAMgC,eACnBgC,YAAapE,KAAKa,sBAClBwD,YAAarE,KAAKc,sBAClBwD,QAAStE,KAAKU,cACdF,aAAcR,KAAKI,MAAMI,aACzB+D,oBAAoB,2BA/GdC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,KAAK,SAAAmE,GACjCA,EAAaC","file":"static/js/main.b6ac0231.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Lightbox from \"react-images\";\nimport './App.css';\nvar Loader = require('react-loader');\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      images: [],\n      loaded: false,\n      count: 4,\n      currentImage: 0,\n      imagesToWatch: []\n    }\n    this.closeLightbox = this.closeLightbox.bind(this);\n    this.gotoPrevLightboxImage = this.gotoPrevLightboxImage.bind(this);\n    this.gotoNextLightboxImage = this.gotoNextLightboxImage.bind(this);\n  }\n\n  loadShibe(){\n    this.setState({...this.state, loaded: false})\n    fetch('https://cors-anywhere.herokuapp.com/http://shibe.online/api/shibes?count=' + this.state.count + '&urls=true&httpsUrls=true')\n    .then((response) => response.json())\n    .then((json) => {\n      console.log(json);\n      let rows = Math.ceil(json.length / 4);\n      this.setState({...this.state, images: json, loaded: true, rows: rows});\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n  }\n\n  changeCount(count){\n    console.log(count);\n    if(count){\n      if(count > 0 && count < 101){\n        this.setState({...this.state, count: count});\n      }\n      else if(count > 100)\n        this.setState({...this.state, count: 100});\n      else if(count < 1)\n        this.setState({...this.state, count: 1});\n    }\n    else\n      this.setState({...this.state, count: \"\"});\n    \n  }\n\n  open(index) {\n    let arr = [];\n    this.state.images.forEach(elem => {\n        arr.push({ src: elem });\n    });\n    this.setState({ ...this.state, currentImage: index, lightboxIsOpen: true, imagesToWatch: arr });\n  }\n\n  closeLightbox() {\n      this.setState({ ...this.state, currentImage: 0, lightboxIsOpen: false });\n  }\n\n  gotoPrevLightboxImage() {\n      this.setState({ ...this.state, currentImage: this.state.currentImage - 1 })\n  }\n\n  gotoNextLightboxImage() {\n      this.setState({ ...this.state, currentImage: this.state.currentImage + 1 })\n  }\n\n  componentDidMount(){\n    this.loadShibe();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"header\">\n            <span className=\"header-text\">Сиба-ину</span>\n            <div style={{\n              display: \"flex\", flexDirection: \"row\", alignItems: \"stretch\", marginRight: 10\n            }}>\n              <span style={{\n                fontSize: 15, marginRight: 10, display: \"flex\", alignItems: \"center\"\n              }}>Количество собачек</span>\n              <input type=\"text\" value={this.state.count} onChange={(e)=>this.changeCount(e.target.value)} />\n              <button className=\"btn-load\" onClick={()=>this.loadShibe()}>Загрузить</button>\n            </div>\n            \n          </div>\n          <Loader loaded={this.state.loaded}>\n                {this.state.images.length > 0 &&\n                <div style={{gridTemplateRows: \"repeat(\" + this.state.rows + \", 45vh)\"}} className=\"container\">\n                  {this.state.images.map((item, index)=>{\n                    return (\n                      <div \n                        className=\"item\" \n                        key={index} \n                        style={{width: \"95%\", height: \"auto\", backgroundSize: \"cover\", backgroundImage: \"url(\" + item + \")\"}}\n                        onClick={()=>this.open(index)}\n                      ></div>\n                    )\n                  })}\n                  </div>}\n            </Loader>\n          \n        </header>\n        <Lightbox\n          backdropClosesModal={true}\n            images={this.state.imagesToWatch}\n            isOpen={this.state.lightboxIsOpen}\n            onClickPrev={this.gotoPrevLightboxImage}\n            onClickNext={this.gotoNextLightboxImage}\n            onClose={this.closeLightbox}\n            currentImage={this.state.currentImage}\n            imageCountSeparator=\" из \"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}